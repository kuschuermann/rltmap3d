* Ringlord Technologies Map3D Java Library
:  Copyright © 2013–2014 Ringlord Technologiesa
:  Copyright © 2013–2014 K. Udo Schuermann
:  All rights reserved
** Introduction
   The Ringlord Technologies Map3D Java Library is an extremely fast
   tool to perform spacial proximity searches.

   Example: With millions of stars in my database, how can I find all
   stars within 25 light years of a specific location? What is the
   one nearest star to a particular location in space? How can I find
   these without searching millions of records?

   Enter Ringlord Technologies Map3D!
** License
   The Ringlord Technologies Map3D Java Library is licensed under the
   GNU General Public License v3 (or later at your option).

   For the license text see the LICENSE.TXT file or visit
   http://www.gnu.org/licenses/
** Use Cases
   The objects stored in a Map3D objects are Location3D objects. You
   will probably want to extend that class (or even extend Point3D if
   you want to address the Location3D in spherical coordinates!)

   Note that Map3D does not have to operate in 3D space, it can also
   operate in 2D space: Simply ensure that the z-coordinate is always
   (and consistently) zero. Everything is then on a flat (x,y) plane.
   You could even keep the y-coordinate at 0, and end up with a
   one-dimension space (a line).

   So, anything works that can be mapped to 1, 2, or 3 coordinates
   (not necessarily spacial ones) and for which a distance of some
   sort can be computed consistently: Extend Location3D (or Point3D)
   and override distanceTo(double,double,double) with your own idea of
   distances between the (x,y,z) coordinate of the current object and
   the given (x,y,z) coordinates.
** GitHub Repository
   The sources are at GitHub (Project: rltodfjlib):
   https://github.com/kuschuermann/rltmap3d
** Building from Source
   The command "ant jar" should do it. If that fails, here is what you
   need to know:

   The source code is essentially compatible with Java 1.5 but a minor
   dependency on Console in the Test class (which could be fixed by
   commenting out some parts) pushes the minimum version to Java 1.6.
   
   Also required (for easy rebuilding) is Apache Ant 1.7 but an
   earlier version of Ant may also work; you could also rebuild the
   software using "javac -d .build src/*.java" and then use jar to
   build an appropriate jar file from a manifest file and the contents
   of the .build/ directory. Essentially, these three commands are all
   you really need to build it:
   
   : mkdir .build
   : jar cfe map3d.jar Test -C .build/ . \
   :                        -C . src/*.java \
   :                        README.text LICENSE.TXT build.xml

   The included "build.xml" script builds for Java 1.7 by default but
   you can force compilation with Java 1.6 by using a command like
   "ant jar6"
** How does it work?
   Map3D works by breaking up your entire space dynamically into a set
   of “compartments” whose size you define, and then searching only
   that subset which can contain elements within your specified range.

   For example, after choosing a compartment size of 2×2×2 and
   distributing 1 million stars randomly in a 200×200×200 unit (think
   light year) space, we can locate all stars within 25 light years by
   searching the contents of at most ~2200 compartments, which is less
   than 0.03% of the total search space, or a speed improvement over a
   strictly linear search of a factor more than 3500.
** Example Code
   Create a Map3D object with a compartment size of 1.5 units. Spread
   1 million Location3D objects into the Map3D using random locations
   in the range -50…+50 for each of the x,y,z coordinates:

   : final Map3D<Location3D> map3d = new Map3D<>( 1.5d );
   : for( int i = 0; i < 1_000_000; i++ )
   :   {
   :     final double x = (random.nextDouble() * 100.0d) - 50.0d;
   :     final double y = (random.nextDouble() * 100.0d) - 50.0d;
   :     final double z = (random.nextDouble() * 100.0d) - 50.0d;
   :
   :     final Location3D n = new Point3D().setCartesian( x,
   :                                                      y,
   :                                                      z );
   : map3d.store( n );

   Next, create a reference point from which we’ll calculate
   distances:

   : final Point3D REF = new Point3D();
   : REF.setCartesian( random.nextDouble() * 100.0d - 50.0d,
   :                   random.nextDouble() * 100.0d - 50.0d,
   :                   random.nextDouble() * 100.0d - 50.0d );

   Locate all Location3D objects that are within 7.5 units from this
   reference point:

   : final List<Location3D> result = map3d.getAllWithin( REF,
   :                                                     7.5d );
   
   You could also locate the nearest Location3D from the reference
   location, so long as it is no farther than 100 units away:

   : final Location3D nearest = map3d.nearestTo( REF, 100.0d );
